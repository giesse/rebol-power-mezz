Modules for REBOL 2

    Purpose: {
        Defines the MODULE function, that creates encapsulated "modules" that are isolated
        from the rest of the code.
    }
    Author: "Gabriele Santilli"
    File: %module.r
    License: "(C) 2008 Qtask, Inc. All rights reserved."
    Version: 1.0.0

===Introduction

In a larger project with many people contributing to the code, it is useful to provide mechanisms
to better isolate parts of the code from each other, so that mistakes, typos, etc. in some part will
have a smaller chance of affecting the other parts. For this reason, we define here a |module| function
that creates an "isolated" piece of code, that only interacts with the rest of the system according to the
provided specification.

===Overview

The |module!| object is the prototype for modules; we represent them as objects so that it is possible
to inspect them after creation (see |-help-module-|). The |module| function creates such objects and
does all the magic necessary for the code in the |body| to be isolated from the rest of the system.

The |spec| argument is a block which can specify the title of the module (using a |string!| value), the
description for the module (using a second |string!| value), and how the module interacts with the rest
of the system. In particular, you can specify whether you want access to the words exported by another
module by *importing* it using the |import| keyword followed by a block of words (each word should refer
to a module object; it is possible to use strings or other values in this block to provide comments).
You can also specify which words you want other modules to be able to import from you by *exporting* them
using the |export| keyword followed by a block of words (you can also use strings or other values in this block
to provide comments about the words you are exporting). Finally, you can allow your module to alter the global
context in a controlled way, by using the |global| keyword followed by a block of words (again, strings are ok
in this block); such words will not be made local to the module.

See |-examples-| for some examples.

    -definitions-:
    -support-functions-

    module!: context [
        -module!-
    ]

    module: func [
        "Create a new module"
        spec [block!] "Specify which modules to IMPORT, which words to EXPORT to other modules, and which words to set as GLOBAL"
        body [block!]

        /local -mod-locals-
    ] [
        -module-
    ]

===Examples

    -examples-:
    my-module: module [
        "My module"
        "This is my module. It is just an example module."
        import [
            my-other-module "We use some stuff from my-other-module"
        ]
        export [
            f "You can use this"
            g "Be careful with it"
        ]
        global [
            a "We set this globally."
        ]
    ] [
        a: 1 ; set globally as specified above
        b: 2 ; local to the module
        f: does [ ; exported to other modules
            print 'f
            c: 3 ; will also be local to the module
        ]
        g: does [ ; exported to other modules
            print 'g
            print "careful!"
            h
        ]
        h: does [ ; local to this module
            print 'h
        ]
    ]

===Definition of the |module!| object prototype

This is the prototype used for module objects. |imported|, |exports| and |global| are the
blocks as they were provided in the spec for the module. (Note that they can be |none| if
they were not specified in the spec.) |local-ctx| and |export-ctx| are the contexts used
by the module, and you should not touch them.

    -module!-:
    type: 'module
    title: "Untitled"
    description: "Undocumented"
    imported: exports: global: none
    local-ctx: export-ctx: none

===Create a module based on the given |spec| and |body|

These are the steps required to create a module:

    -module-:
    -parse-spec-
    -make-locals-
    -import-modules-
    -find-conflicts-
    -bind-
    -resolve-conflicts-
    -do-body-

---Create the module object and parse the |spec|

Here we parse the |spec| block and set the respective words in the
|result| module object. We also prepare |export-ctx|, |imports| and
|globals| by extracting all the words from |exports|, |imported| and
|global|.

    -parse-spec-:
    result: make module! [
        parse spec [
            any [
                'import set imported block!
                |
                'export set exports block!
                |
                'global set global block!
                |
                set t string! set d string! (title: t description: d)
                |
                set t string! (title: description: t)
                |
                skip
            ]
        ]
        foreach [src dst] [
            exports     export-ctx
            imported    imports
            global      globals
        ] [
            set dst unique any [get src [ ]]
            ; we can't allow any-word because EXCLUDE (used below)
            ; distinguishes between different types of words
            remove-each value get dst [not word? :value]
        ]
    ]

---|module|'s locals

    -mod-locals-:
    result t d imports globals

---Create the list of local words

Here we parse the |body| deeply for |set-word!|'s. We list all words that need to be made
local in |result/local-ctx|, and exclude the words that we want global from them. (Notice
that we don't need to copy the block here, because |exclude| will, and we're going to
make a context out of it anyway.)

Notice that we just leave the words in the |globals| list alone, so they may be bound to
other contexts as well, not just |system/words|.

    -make-locals-:
    result/local-ctx: clear []
    parse body rule: [
        any [
            ; need to word! here because EXCLUDE (used below)
            ; distinguishes between different types of words
            set word set-word! (append result/local-ctx to word! word)
            |
            into rule
            |
            skip
        ]
    ]
    result/local-ctx: exclude result/local-ctx globals

We need these additional local words for the function:

    -mod-locals-:
    rule word

---Import other modules specified in the |spec|

Here we iterate thru all the words in the |imports| list, check to make sure that they
refer to a module object, and for those that do, bind the |body| to their export context,
in the order they are specified.

We are also binding the |result/local-ctx| list of words to their export context; we are doing
this in preparation for the |-resolve-conflicts-| step.

    -import-modules-:
    foreach module imports [
        module: get module
        if all [
            object? module
            'module = get in module 'type
        ] [
            bind body module/export-ctx
            ; used to resolve conflicts
            bind result/local-ctx module/export-ctx
        ]
    ]

---Find words that are global or imported from another module, but are being set in the |body|

This step is necessary to avoid a problem. Since we make all words that are being set local,
regardless of where they are being set, and regardless of whether we are also importing the
same word from another module, we end up "shielding" access to those words. On one side, we
want this to happen (since we don't want to allow the module to alter a module it is importing,
or the global context), but on the other side we don't want to prevent access to the values
these words refer to.

A word in |result/local-ctx| has a value in the following cases:

#it has a value in the global context;

#it has a value in the export context of one of the modules we are importing (this is thanks to the
bind we do in |-import-modules-|).

We collect such words in the |conflicts| block.

    -find-conflicts-:
    conflicts: clear [ ]
    foreach word result/local-ctx [
        if value? word [append conflicts word]
    ]

|conflicts| needs to be local:

    -mod-locals-:
    conflicts

---Create the local and export contexts and bind the |body| to them

We create the local and export contexts using |make-context|, and bind
the |body| to them.

    -bind-:
    foreach ctx bind [export-ctx local-ctx] result [
        either empty? get ctx [
            set ctx none
        ] [
            bind body set ctx make-context get ctx
        ]
    ]

---Import the values that would otherwise be shielded by the local context

This step solves the problem we described in |-find-conflicts-|, by importing the values
in the local context.

    -resolve-conflicts-:
    foreach word conflicts [
        set in result/local-ctx word get word
    ]

---|do| the |body|; return the module object

Finally, we |do| the |body|, and return |result|.

    -do-body-:
    do body
    result

===Support functions

The |make-context| function creates a context from a list of words. The context is returned as an object,
but notice that it has no |'self| word.

    -support-functions-:
    make-context: func [words] [
        use words compose [bind? (to lit-word! first words)]
    ]

===Hiding the support functions from the global context

We don't want to make |make-context| global, so the main code block is actually using
|use| to keep it local. (We cannot use |module| while defining it, can we?)

    -main-:
    use [make-context] [
        -definitions-
    ]

===How to inspect a module

This is an example of how to inspect a module object.

    -help-module-:
    ; TODO

===Credits

Thanks to Brian Hawley and Gregg Irwin for their help during the design phase.
