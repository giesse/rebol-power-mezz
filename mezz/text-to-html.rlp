Simple plain text to HTML converter

    Type: Module
    Purpose: {
        Prepares a string of plain text for inclusion into an HTML page;
        makes links clickable, encodes to HTML, and so on.
    }
    Author: "Gabriele Santilli"
    File: %text-to-html.r
    Version: 2.0.0
    Imports: [
        %parsers/common-rules.r
        %mezz/text-encoding.r
        %parsers/uri-parser.r   "Used in case of URL filtering"
    ]
    Globals: [
        text-to-html            "Made global so that it is easy to use from non-modules"
    ]

===Introduction

When showing a plain text document (e.g. an email message) inside a HTML page,
it is very often desirable to make links clickable, and do other adjustments.
This program provides a function to do just that.

===Overview

    -main-:
    -parse-rules-
    -options-

    text-to-html: func [
        "Prepare a plain text string for inclusion in HTML"
        text [string!]
        /with options [block!] "Specify options for the conversion"
        
        /local -tth-locals-
    ] [
        -text-to-html-
    ]

---Available options

The |/with| refinement can be used to specify the following options:

:|utf8| - set to |true| to use the |html-utf8| encoding instead of the |html-ascii| encoding
for all text.

:|custom-handler| - you can set it to a function that will be called to handle all links
in the text. The function must take one argument, an object, that the function can modify. The argument
is the object returned by |parse-uri| (which is called on the link being processed), with the addition
of the fields |target| and |contents|. The former can be used to set the "target" attribute of the
resulting <a> tag; the latter can be used to change the link text, and by default it is the original
URL as it appears on the text. Please note that you are responsible for the correct HTML encoding of
the |contents| string, as you are allowed to put arbitrary HTML in there.

    -options-:
    default-options: context [
        utf8: no
        custom-handler: none
    ]

===Find URLs in the text and turn them into links, encode everything else to HTML

Not as efficient as I'd like it to be...

    -text-to-html-:
    options: make default-options any [options [ ]]
    output: make string! length? text
    encoding: either options/utf8 ['html-utf8] ['html-ascii]
    custom-handler?: any-function? get in options 'custom-handler
    parse/all text [
        copy str any [punct | space-char] (if str [encode-text/to str encoding output])
        any [
            copy str url-rule (
                either custom-handler? [
                    options/custom-handler obj: make parse-uri join add-scheme str [
                        target: none
                        contents: encode-text str encoding
                    ]
                    append output {<a href="}
                    encode-text/to form-uri obj encoding output
                    append output #"^""
                    if string? obj/target [
                        append output { target="}
                        encode-text/to obj/target encoding output
                        append output #"^""
                    ]
                    repend output [
                        #">" obj/contents </a>
                    ]
                ] [
                    insert insert tail output {<a href="} add-scheme
                    encode-text/to str encoding output
                    append output {">}
                    encode-text/to str encoding output
                    append output {</a>}
                ]
            )
            copy str any [punct | space-char] (if str [encode-text/to str encoding output])
            |
            copy str text-rule (encode-text/to str encoding output)
        ]
    ]
    output

---|text-to-html|'s locals
    
    -tth-locals-:
    output str encoding custom-handler? obj

===Parse rules to find URLs inside some text

    -parse-rules-:
    scheme: [
        "http://" | "https://" | "ftp://" | "mailto:"
    ]
    punct-char: charset {.,!()[];:?{}'"<>}
    punct: [punct-char | "¿" | "¡"] ; please note that ¿ and ¡ are strings because they are actually UTF-8 sequences
    unreserved: union alpha-char union digit charset "-_~/$&*+="
    unreserved+: union unreserved charset "@"
    name-or-host: [some unreserved any [some punct some unreserved]]
    url-rule: [
        [scheme (add-scheme: "") | "www." (add-scheme: "http://") | "ftp." (add-scheme: "ftp://")]
        some unreserved+ any [some punct some unreserved+]
        |
        name-or-host #"@" name-or-host (add-scheme: "mailto:")
    ]
    non-space: complement space-char
    text-rule: [
        some non-space any [space-char | punct]
    ]
